version: "3.9"

services:
  ssn-service-api:
    build:
      context: .
      dockerfile: docker/grpc-server/Dockerfile
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: ssn-service-api
    networks:
      - ssnnw
    depends_on:
      - postgres
    links:
      - postgres
    ports:
      - "8082:8082" # gRPC
      - "9100:9100" # Metrics prometheus
      - "8000:8000" # Status prometheus
      - "40000:40000" # Debug port
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/live']
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - ./migrations/grpc-server:/root/migrations/grpc-server
      - ./config.yml:/root/config.yml
    command: ["./grpc-server", "--migration"]

  ssn-service-api-events-retranslator:
    build:
      context: .
      dockerfile: docker/retranslator/Dockerfile
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: ssn-service-api-events-retranslator
    networks:
      - ssnnw
    depends_on:
      - postgres
      - kafka-1
      - kafka-2
    links:
      - postgres
      - kafka-1
      - kafka-2
    ports:
      - "9101:9100" # Metrics prometheus
      - "8001:8000" # Status prometheus
      - "40001:40000" # Debug port
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:8001/live' ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - ./config.retranslator.yml:/root/config.retranslator.yml

  ssn-service-facade:
    build:
      context: .
      dockerfile: docker/facade/Dockerfile
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: ssn-service-facade
    networks:
      - ssnnw
    depends_on:
      - postgres-facade
      - kafka-1
      - kafka-2
    links:
      - postgres-facade
      - kafka-1
      - kafka-2
    ports:
      - "9102:9100" # Metrics prometheus
      - "8002:8000" # Status prometheus
      - "40002:40000" # Debug port
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:8002/live' ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - ./migrations/facade:/root/migrations/facade
      - ./config.facade.yml:/root/config.facade.yml
    command: [ "./facade", "--migration" ]

  ssn-service-facade-grpc:
    build:
      context: .
      dockerfile: docker/facade-grpc/Dockerfile
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: ssn-service-facade-grpc
    networks:
      - ssnnw
    depends_on:
      - postgres-facade
      - redis
    links:
      - postgres-facade
      - redis
    ports:
      - "8083:8082" # gRPC
      - "9103:9100" # Metrics prometheus
      - "8003:8000" # Status prometheus
      - "40003:40000" # Debug port
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:8003/live' ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - ./config.facade.grpc.yml:/root/config.facade.grpc.yml

  ssn-service-bot:
    build:
      context: .
      dockerfile: docker/bot/Dockerfile
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: ssn-service-bot
    networks:
      - ssnnw
    depends_on:
      - ssn-service-api
      - ssn-service-facade-grpc
    links:
      - ssn-service-api
      - ssn-service-facade-grpc
    ports:
      - "9104:9100" # Metrics prometheus
      - "8004:8000" # Status prometheus
      - "40004:40000" # Debug port
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:8004/live' ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - ./.env:/root/.env
      - ./config.bot.yml:/root/config.bot.yml

  postgres:
    image: edoburu/pgbouncer
    environment:
      - DB_USER=docker
      - DB_PASSWORD=docker
      - DB_HOST=postgres-base
      - DB_NAME=ssn_service_api
      - POOL_MODE=session
      - ADMIN_USERS=docker
      - AUTH_TYPE=plain
    links:
      - postgres-base
    ports:
      - "5432:5432"
    depends_on:
      - postgres-base
    networks:
      - ssnnw

  postgres-base:
    image: postgres:latest
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ssn_service_api
      APP_DB_USER: docker
      APP_DB_PASS: docker
    networks:
      - ssnnw
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    volumes:
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./_data/pgdata:/var/lib/postgresql/data
      - ./scripts/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh

  postgres-facade:
    image: edoburu/pgbouncer
    environment:
      - DB_USER=facade
      - DB_PASSWORD=facade
      - DB_HOST=postgres-facade-base
      - DB_NAME=ssn_service
      - POOL_MODE=session
      - ADMIN_USERS=facade
      - AUTH_TYPE=plain
    links:
      - postgres-facade-base
    ports:
      - "5433:5432"
    depends_on:
      - postgres-facade-base
    networks:
      - ssnnw

  postgres-facade-base:
    image: postgres:latest
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ssn_service
      APP_DB_USER: facade
      APP_DB_PASS: facade
    networks:
      - ssnnw
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    volumes:
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./_data/pgdata_1:/var/lib/postgresql/data
      - ./scripts/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh

  zookeeper:
    image: confluentinc/cp-zookeeper
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: zookeeper
    ports:
      - "2181:2181"
    environment:
      zk_id: "1"
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - ssnnw

  kafka-1:
    image: confluentinc/cp-kafka
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: kafka
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:32181"
      KAFKA_LISTENERS: INTERNAL://kafka-1:9092,OUTSIDE://kafka-1:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 10
    command: sh -c "((sleep 15 && kafka-topics --create --zookeeper zookeeper:32181 --replication-factor 1 --partitions 1 --topic templates)&) && /etc/confluent/docker/run"
    networks:
      - ssnnw

  kafka-2:
    image: confluentinc/cp-kafka
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: kafka
    depends_on:
      - zookeeper
    ports:
      - "9095:9094"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:32181"
      KAFKA_LISTENERS: INTERNAL://kafka-2:9092,OUTSIDE://kafka-2:9095
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:9092,OUTSIDE://localhost:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 10
    command: sh -c "((sleep 15 && kafka-topics --create --zookeeper zookeeper:32181 --replication-factor 1 --partitions 1 --topic templates)&) && /etc/confluent/docker/run"
    networks:
      - ssnnw

  redis:
    image: redis:alpine
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: redis
    ports:
      - "6379:6379"
    networks:
      - ssnnw

  redis-ui:
    image: patrikx3/p3x-redis-ui:latest
    restart: unless-stopped
    depends_on:
      - redis
    links:
      - redis
    ports:
      - "7843:7843"
    volumes:
      - ./docker/redis-ui/.p3xrs-conns.json:/settings/.p3xrs-conns.json
    networks:
      - ssnnw

  kafka-ui:
    image: obsidiandynamics/kafdrop
    restart: unless-stopped
    depends_on:
      - kafka-1
      - kafka-2
    ports:
      - "9001:9001"
    environment:
      SERVER_PORT: 9001
      KAFKA_BROKERCONNECT: kafka-1:9092, kafka-2:9092
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
      CMD_ARGS: "--message.format=PROTOBUF --protobufdesc.directory=/var/protobuf_desc"
    volumes:
      - ./api/ozonmp/ssn_service_api/v1:/var/protobuf_desc
    networks:
      - ssnnw

  swagger-ui:
    image: swaggerapi/swagger-ui
    restart: unless-stopped
    volumes:
      - ./swagger:/swagger
    environment:
      SWAGGER_JSON: /swagger/ozonmp/ssn_service_api/v1/ssn_service_api.swagger.json
      BASE_URL: /swagger
    depends_on:
      - ssn-service-api
    networks:
      - ssnnw

  jaeger:
    image: jaegertracing/all-in-one
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: jaeger
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - ssnnw

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: prometheus
    ports:
      - "9099:9090"
    networks:
      - ssnnw
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    links:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=MYPASSWORT
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - ssnnw
    volumes:
      - "./_data/grafana:/var/lib/grafana"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    restart: unless-stopped
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1g
    networks:
      - ssnnw
    volumes:
      - esdata:/usr/share/elasticsearch/data
  # Elasticsearch: https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docker.html

  mongo:
    image: mongo:4.2
    restart: unless-stopped
    networks:
      - ssnnw
    volumes:
      - mongodata:/data/db

  # Graylog: https://hub.docker.com/r/graylog/graylog/
  graylog:
    image: graylog/graylog:4.2
    environment:
      # CHANGE ME (must be at least 16 characters)!
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
      # Password: admin
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/
    entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh
    networks:
      - ssnnw
    links:
      - mongo
      - elasticsearch
    depends_on:
      - mongo
      - elasticsearch
    ports:
      # Graylog web interface and REST API
      - "9000:9000"
      # Syslog TCP
      - "1514:1514"
      # Syslog UDP
      - "1514:1514/udp"
      # GELF TCP
      - "12201:12201"
      # GELF UDP
      - "12201:12201/udp"
    restart: unless-stopped

  nginx:
    image: nginx:latest
    restart: unless-stopped
    depends_on:
      - ssn-service-api
      - swagger-ui
    links:
      - ssn-service-api
      - swagger-ui
    networks:
      - ssnnw
    ports:
      - "8080:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf

  pypiserver:
    image: pypiserver/pypiserver:latest
    restart: unless-stopped
    networks:
      - ssnnw
    ports:
      - "8088:8080"
    volumes:
      - ./pypkg/ssn-service-api/dist:/data/packages

volumes:
  pgdata:
    driver: local
  esdata:
    driver: local
  mongodata:
    driver: local

networks:
  ssnnw:
    driver: bridge
