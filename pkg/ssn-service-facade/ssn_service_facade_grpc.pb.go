// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ssn_service_facade

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SsnServiceFacadeServiceClient is the client API for SsnServiceFacadeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SsnServiceFacadeServiceClient interface {
	// DescribeServiceV1 - Describe a service
	DescribeServiceV1(ctx context.Context, in *DescribeServiceV1Request, opts ...grpc.CallOption) (*DescribeServiceV1Response, error)
	// ListServicesV1 - Services list
	ListServicesV1(ctx context.Context, in *ListServicesV1Request, opts ...grpc.CallOption) (*ListServicesV1Response, error)
}

type ssnServiceFacadeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSsnServiceFacadeServiceClient(cc grpc.ClientConnInterface) SsnServiceFacadeServiceClient {
	return &ssnServiceFacadeServiceClient{cc}
}

func (c *ssnServiceFacadeServiceClient) DescribeServiceV1(ctx context.Context, in *DescribeServiceV1Request, opts ...grpc.CallOption) (*DescribeServiceV1Response, error) {
	out := new(DescribeServiceV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.ssn_service_facade.v1.SsnServiceFacadeService/DescribeServiceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssnServiceFacadeServiceClient) ListServicesV1(ctx context.Context, in *ListServicesV1Request, opts ...grpc.CallOption) (*ListServicesV1Response, error) {
	out := new(ListServicesV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.ssn_service_facade.v1.SsnServiceFacadeService/ListServicesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SsnServiceFacadeServiceServer is the server API for SsnServiceFacadeService service.
// All implementations must embed UnimplementedSsnServiceFacadeServiceServer
// for forward compatibility
type SsnServiceFacadeServiceServer interface {
	// DescribeServiceV1 - Describe a service
	DescribeServiceV1(context.Context, *DescribeServiceV1Request) (*DescribeServiceV1Response, error)
	// ListServicesV1 - Services list
	ListServicesV1(context.Context, *ListServicesV1Request) (*ListServicesV1Response, error)
	mustEmbedUnimplementedSsnServiceFacadeServiceServer()
}

// UnimplementedSsnServiceFacadeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSsnServiceFacadeServiceServer struct {
}

func (UnimplementedSsnServiceFacadeServiceServer) DescribeServiceV1(context.Context, *DescribeServiceV1Request) (*DescribeServiceV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeServiceV1 not implemented")
}
func (UnimplementedSsnServiceFacadeServiceServer) ListServicesV1(context.Context, *ListServicesV1Request) (*ListServicesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServicesV1 not implemented")
}
func (UnimplementedSsnServiceFacadeServiceServer) mustEmbedUnimplementedSsnServiceFacadeServiceServer() {
}

// UnsafeSsnServiceFacadeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SsnServiceFacadeServiceServer will
// result in compilation errors.
type UnsafeSsnServiceFacadeServiceServer interface {
	mustEmbedUnimplementedSsnServiceFacadeServiceServer()
}

func RegisterSsnServiceFacadeServiceServer(s grpc.ServiceRegistrar, srv SsnServiceFacadeServiceServer) {
	s.RegisterService(&SsnServiceFacadeService_ServiceDesc, srv)
}

func _SsnServiceFacadeService_DescribeServiceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeServiceV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsnServiceFacadeServiceServer).DescribeServiceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.ssn_service_facade.v1.SsnServiceFacadeService/DescribeServiceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsnServiceFacadeServiceServer).DescribeServiceV1(ctx, req.(*DescribeServiceV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsnServiceFacadeService_ListServicesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsnServiceFacadeServiceServer).ListServicesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.ssn_service_facade.v1.SsnServiceFacadeService/ListServicesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsnServiceFacadeServiceServer).ListServicesV1(ctx, req.(*ListServicesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SsnServiceFacadeService_ServiceDesc is the grpc.ServiceDesc for SsnServiceFacadeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SsnServiceFacadeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ozonmp.ssn_service_facade.v1.SsnServiceFacadeService",
	HandlerType: (*SsnServiceFacadeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeServiceV1",
			Handler:    _SsnServiceFacadeService_DescribeServiceV1_Handler,
		},
		{
			MethodName: "ListServicesV1",
			Handler:    _SsnServiceFacadeService_ListServicesV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ozonmp/ssn_service_facade/v1/ssn_service_facade.proto",
}
